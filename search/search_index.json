{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Textconf Documentation","text":"<p>Jinja2-based text generation from configuration objects.</p> <p>Textconf provides a flexible and powerful way to generate text from configuration objects using Jinja2 templates. It allows for easy creation, updating, and rendering of configuration objects, with support for custom methods and dynamic content.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install textconf\n</code></pre>"},{"location":"usage/hydra/","title":"Hydra application","text":""},{"location":"api/textconf/","title":"textconf","text":"textconf<p> source package textconf </p> <p>Jinja2-based text generation from configuration objects.</p> <p>Provide a flexible and powerful way to generate text from configuration objects using Jinja2 templates. It allows for easy creation, updating, and rendering of configuration objects, with support for custom methods and dynamic content.</p> <p> Classes </p> <ul> <li> <p>BaseConfig \u2014 Represent a base configuration for text.</p> </li> <li> <p>Renderable \u2014 Represent a renderable class.</p> </li> <li> <p>RenderableEnum \u2014 Renderable enum.</p> </li> </ul> <p> source dataclass BaseConfig(template: str = '') </p> <p>Bases : Renderable</p> <p>Represent a base configuration for text.</p> <p>This class provides a structure for storing configuration parameters and methods for updating and rendering text based on templates.</p> <p> Attributes </p> <ul> <li> <p>template :  str | Path \u2014 The name or path of the template file.</p> </li> </ul> <p> Methods </p> <ul> <li> <p>set_environment \u2014 Set the environment for the <code>Template</code>.</p> </li> <li> <p>render \u2014 Render text from the specified configuration.</p> </li> </ul> <p> source classmethod BaseConfig.set_environment(env: Environment) \u2192 None </p> <p>Set the environment for the <code>Template</code>.</p> <p> source classmethod BaseConfig.render(cfg: Self, *args: dict[str, Any] | list[str], **kwargs: Any) \u2192 str </p> <p>Render text from the specified configuration.</p> <p>This method locates the template file, updates the configuration, and renders the text using the template and additional keyword arguments provided. It supports dynamic template methods defined in the class.</p> <p> Parameters </p> <ul> <li> <p>cfg :  Self \u2014 The configuration instance to render the text from.</p> </li> <li> <p>*args :  dict[str, Any] | list[str] \u2014 Additional positional arguments to include in the template context.</p> </li> <li> <p>**kwargs :  Any \u2014 Additional keyword arguments to pass to the template rendering.</p> </li> </ul> <p> Returns </p> <ul> <li> <p>str \u2014 The rendered text as a string.</p> </li> </ul> <p> Raises </p> <ul> <li> <p>FileNotFoundError \u2014 If the template file does not exist in any of the searched directories.</p> </li> </ul> <p> source dataclass Renderable() </p> <p>Bases : ABC</p> <p>Represent a renderable class.</p> <p> Methods </p> <ul> <li> <p>context \u2014 Get the context for rendering.</p> </li> <li> <p>render \u2014 Render the given configuration and return a string.</p> </li> </ul> <p> source classmethod Renderable.context(cfg: Renderable) \u2192 dict[str, Any] </p> <p>Get the context for rendering.</p> <p> source classmethod Renderable.render(cfg: Renderable, *args: Any, **kwargs: Any) \u2192 str </p> <p>Render the given configuration and return a string.</p> <p> source enum RenderableEnum(*args, **kwds) </p> <p>Bases : Enum</p> <p>Renderable enum.</p> <p> Methods </p> <ul> <li> <p>render \u2014 Render the enum value using the provided configuration.</p> </li> </ul> <p> source method RenderableEnum.render(cfg: Renderable, *args: dict[str, Any] | list[str], **kwargs: Any) \u2192 str </p> <p>Render the enum value using the provided configuration.</p> <p> Parameters </p> <ul> <li> <p>cfg :  object \u2014 The configuration instance to render the enum value with.</p> </li> <li> <p>*args :  dict[str, Any] | list[str] \u2014 Additional positional arguments to include in the template context.</p> </li> <li> <p>**kwargs :  Any \u2014 Additional keyword arguments to pass to the template rendering.</p> </li> </ul> <p> Returns </p> <ul> <li> <p>str \u2014 The rendered output from the corresponding renderable class.</p> </li> </ul> <p> Raises </p> <ul> <li> <p>ValueError</p> </li> </ul>"},{"location":"api/textconf/config/","title":"textconf.config","text":"textconf.config<p> source module textconf.config </p> <p>Provide tools for configuration and template-based rendering.</p> <p>This module defines a base configuration class for text along with functions to locate and render templates using these configurations. It supports dynamic discovery of template methods within classes.</p> <p> Classes </p> <ul> <li> <p>Renderable \u2014 Represent a renderable class.</p> </li> <li> <p>BaseConfig \u2014 Represent a base configuration for text.</p> </li> </ul> <p> source dataclass Renderable() </p> <p>Bases : ABC</p> <p>Represent a renderable class.</p> <p> Methods </p> <ul> <li> <p>context \u2014 Get the context for rendering.</p> </li> <li> <p>render \u2014 Render the given configuration and return a string.</p> </li> </ul> <p> source classmethod Renderable.context(cfg: Renderable) \u2192 dict[str, Any] </p> <p>Get the context for rendering.</p> <p> source classmethod Renderable.render(cfg: Renderable, *args: Any, **kwargs: Any) \u2192 str </p> <p>Render the given configuration and return a string.</p> <p> source dataclass BaseConfig(template: str = '') </p> <p>Bases : Renderable</p> <p>Represent a base configuration for text.</p> <p>This class provides a structure for storing configuration parameters and methods for updating and rendering text based on templates.</p> <p> Attributes </p> <ul> <li> <p>template :  str | Path \u2014 The name or path of the template file.</p> </li> </ul> <p> Methods </p> <ul> <li> <p>set_environment \u2014 Set the environment for the <code>Template</code>.</p> </li> <li> <p>render \u2014 Render text from the specified configuration.</p> </li> </ul> <p> source classmethod BaseConfig.set_environment(env: Environment) \u2192 None </p> <p>Set the environment for the <code>Template</code>.</p> <p> source classmethod BaseConfig.render(cfg: Self, *args: dict[str, Any] | list[str], **kwargs: Any) \u2192 str </p> <p>Render text from the specified configuration.</p> <p>This method locates the template file, updates the configuration, and renders the text using the template and additional keyword arguments provided. It supports dynamic template methods defined in the class.</p> <p> Parameters </p> <ul> <li> <p>cfg :  Self \u2014 The configuration instance to render the text from.</p> </li> <li> <p>*args :  dict[str, Any] | list[str] \u2014 Additional positional arguments to include in the template context.</p> </li> <li> <p>**kwargs :  Any \u2014 Additional keyword arguments to pass to the template rendering.</p> </li> </ul> <p> Returns </p> <ul> <li> <p>str \u2014 The rendered text as a string.</p> </li> </ul> <p> Raises </p> <ul> <li> <p>FileNotFoundError \u2014 If the template file does not exist in any of the searched directories.</p> </li> </ul>"},{"location":"api/textconf/enum/","title":"textconf.enum","text":"textconf.enum<p> source module textconf.enum </p> <p>Provide renderable enums.</p> <p> Classes </p> <ul> <li> <p>RenderableEnum \u2014 Renderable enum.</p> </li> </ul> <p> source enum RenderableEnum(*args, **kwds) </p> <p>Bases : Enum</p> <p>Renderable enum.</p> <p> Methods </p> <ul> <li> <p>render \u2014 Render the enum value using the provided configuration.</p> </li> </ul> <p> source method RenderableEnum.render(cfg: Renderable, *args: dict[str, Any] | list[str], **kwargs: Any) \u2192 str </p> <p>Render the enum value using the provided configuration.</p> <p> Parameters </p> <ul> <li> <p>cfg :  object \u2014 The configuration instance to render the enum value with.</p> </li> <li> <p>*args :  dict[str, Any] | list[str] \u2014 Additional positional arguments to include in the template context.</p> </li> <li> <p>**kwargs :  Any \u2014 Additional keyword arguments to pass to the template rendering.</p> </li> </ul> <p> Returns </p> <ul> <li> <p>str \u2014 The rendered output from the corresponding renderable class.</p> </li> </ul> <p> Raises </p> <ul> <li> <p>ValueError</p> </li> </ul>"},{"location":"api/textconf/render/","title":"textconf.render","text":"textconf.render<p> source module textconf.render </p> <p>Provide utilities for loading and rendering Jinja2 templates.</p> <p>Leverage the omegaconf library for configuration management. It is designed to facilitate the dynamic generation of content based on template files and configurable context parameters.</p> <p> Functions </p> <ul> <li> <p>render \u2014 Render a Jinja2 template with the given context.</p> </li> <li> <p>to_dotlist \u2014 Convert a dictionary to a list of dotlist strings.</p> </li> </ul> <p> source render(template: Template, cfg: object | None = None, *args: dict[str, Any] | list[str], **kwargs: Any) \u2192 str </p> <p>Render a Jinja2 template with the given context.</p> <p>Take a template object and a configuration object or dictionary, and renders the template with the provided context. Additional context can be passed as keyword arguments.</p> <p> Parameters </p> <ul> <li> <p>template :  Template \u2014 The template to render.</p> </li> <li> <p>cfg :  object | None \u2014 The configuration object or dictionary to use as context for rendering the template. If configuration is not an instance of DictConfig, it will be converted using OmegaConf.structured.</p> </li> <li> <p>*args :  dict[str, Any] | list[str] \u2014 Additional positional arguments to include in the template context.</p> </li> <li> <p>**kwargs :  Any \u2014 Additional keyword arguments to include in the template context.</p> </li> </ul> <p> Returns </p> <ul> <li> <p>str \u2014 The rendered template as a string.</p> </li> </ul> <p> source to_dotlist(cfg: dict[str, Any]) \u2192 list[str] </p> <p>Convert a dictionary to a list of dotlist strings.</p> <p> Parameters </p> <ul> <li> <p>cfg :  dict[str, Any] \u2014 The dictionary to convert to a dotlist string.</p> </li> </ul> <p> Returns </p> <ul> <li> <p>list[str] \u2014 A list of dotlist strings.</p> </li> </ul>"},{"location":"api/textconf/template/","title":"textconf.template","text":"textconf.template<p> source module textconf.template </p> <p>Template file handling.</p> <p> Functions </p> <ul> <li> <p>get_template_file \u2014 Return the path to a template file associated with a given class.</p> </li> <li> <p>iter_template_methods \u2014 Yield name and method pairs of template methods from a given class.</p> </li> <li> <p>is_template_method \u2014 Check if the object is a template method.</p> </li> <li> <p>get_environment \u2014 Get the environment for a template file.</p> </li> </ul> <p> source get_template_file(cls: object, filename: str | Path, dir: str | Path = 'templates') \u2192 Path </p> <p>Return the path to a template file associated with a given class.</p> <p>This function searches for a template file with the specified name, first in the current directory, then in the provided directory, and finally in the directory relative to the module where the class is defined. If the file is not found, a FileNotFoundError is raised.</p> <p> Parameters </p> <ul> <li> <p>cls :  object \u2014 The class object associated with the template file. It is used to determine the relative path if the template file is not found in the current or provided directory.</p> </li> <li> <p>filename :  str | Path \u2014 The name of the template file.</p> </li> <li> <p>dir :  str | Path, optional \u2014 The directory where the template files are stored. Defaults to \"templates\".</p> </li> </ul> <p> Returns </p> <ul> <li> <p>Path \u2014 The absolute path to the template file.</p> </li> </ul> <p> Raises </p> <ul> <li> <p>FileNotFoundError \u2014 If the template file does not exist in any of the searched directories.</p> </li> </ul> <p> source iter_template_methods(cls: object) \u2192 Iterator[tuple[str, Callable[[Any], Any]]] </p> <p>Yield name and method pairs of template methods from a given class.</p> <p>Iterate over all members of a class, check if each member is a template method using the <code>is_template_method</code> function, and yield the name and the method itself if it is a template method.</p> <p> Parameters </p> <ul> <li> <p>cls :  object \u2014 The class object whose members are to be checked for being template methods.</p> </li> </ul> <p> Yields </p> <ul> <li> <p>tuple[str, Callable[[Any], Any]] \u2014 Tuples, each containing the name of the template method and the method itself.</p> </li> </ul> <p> source is_template_method(obj: object) \u2192 TypeGuard[Callable[[Any], Any]] </p> <p>Check if the object is a template method.</p> <p>A template method in this context is considered to be a method that</p> <ul> <li>Is a bound method of a class (not a static or free function).</li> <li>Accepts exactly one argument.</li> <li>Has a return annotation that is neither None nor missing.</li> </ul> <p> Parameters </p> <ul> <li> <p>obj :  object \u2014 The object to be inspected.</p> </li> </ul> <p> Returns </p> <ul> <li> <p>bool \u2014 True if the object is a method that matches the template method criteria. False otherwise.</p> </li> </ul> <p> source get_environment(template_file: str | Path | None) \u2192 Environment </p> <p>Get the environment for a template file.</p> <p> Parameters </p> <ul> <li> <p>template_file :  str | Path | None \u2014 The path to the template file.</p> </li> </ul> <p> Returns </p> <ul> <li> <p>Environment \u2014 The environment for the template file.</p> </li> </ul>"},{"location":"api/textconf/testing/","title":"textconf.testing","text":"textconf.testing<p> source module textconf.testing </p> <p>Test the rendering process of configuration objects and their results.</p> <p>This module provides test utilities to assert that the rendering process of a configuration object produces the expected output. It is designed to be used in test suites to verify that the configuration and rendering mechanisms are functioning correctly.</p> <p> Functions </p> <ul> <li> <p>assert_render_in \u2014 Assert that a rendered text contains a substring.</p> </li> <li> <p>assert_render_eq \u2014 Assert that a rendered text is equal to the expected string.</p> </li> <li> <p>assert_render_startswith \u2014 Assert that a rendered text starts with the expected string.</p> </li> <li> <p>assert_render_endswith \u2014 Assert that a rendered text ends with the expected string.</p> </li> </ul> <p> source assert_render_in(cfg: Renderable, expected: str | list[str], *args: Any, **kwargs: Any) \u2192 None </p> <p>Assert that a rendered text contains a substring.</p> <p>This function takes a configuration object, renders a text using the configuration's class render method, and then asserts that the expected substring is present in the rendered text. It performs this check twice: once with the original configuration object and once with a configuration object converted to a dictionary using OmegaConf.</p> <p> Parameters </p> <ul> <li> <p>cfg :  BaseConfig \u2014 The configuration object to render the text from.</p> </li> <li> <p>expected :  str | list[str] \u2014 The substring that must be present in the rendered text.</p> </li> <li> <p>*args :  Any \u2014 Additional positional arguments to pass to the <code>render</code> function.</p> </li> <li> <p>**kwargs :  Any \u2014 Additional keyword arguments to pass to the <code>render</code> function.</p> </li> </ul> <p> Raises </p> <ul> <li> <p>AssertionError \u2014 If the expected substring is not found in the rendered text for either the original configuration object or the OmegaConf dictionary configuration.</p> </li> </ul> <p> source assert_render_eq(cfg: Renderable, expected: str, *args: Any, **kwargs: Any) \u2192 None </p> <p>Assert that a rendered text is equal to the expected string.</p> <p>This function takes a configuration object, renders a text using the configuration's class render method, and then asserts that the rendered text is equal to the expected string. It performs this check twice: once with the original configuration object and once with a configuration object converted to a dictionary using OmegaConf.</p> <p> Parameters </p> <ul> <li> <p>cfg :  Renderable \u2014 The configuration object to render the text from.</p> </li> <li> <p>expected :  str \u2014 The string that the rendered text must match.</p> </li> <li> <p>*args :  Any \u2014 Additional positional arguments to pass to the <code>render</code> function.</p> </li> <li> <p>**kwargs :  Any \u2014 Additional keyword arguments to pass to the <code>render</code> function.</p> </li> </ul> <p> Raises </p> <ul> <li> <p>AssertionError \u2014 If the rendered text does not match the expected string for either the original configuration object or the OmegaConf dictionary configuration.</p> </li> </ul> <p> source assert_render_startswith(cfg: Renderable, expected: str, *args: Any, **kwargs: Any) \u2192 None </p> <p>Assert that a rendered text starts with the expected string.</p> <p>This function takes a configuration object, renders a text using the configuration's class render method, and asserts that the rendered text starts with the specified string. It performs this check twice: once with the original configuration object and once with a configuration object converted to a dictionary using OmegaConf.</p> <p> Parameters </p> <ul> <li> <p>cfg :  Renderable \u2014 The configuration object to render the text from.</p> </li> <li> <p>expected :  str \u2014 The string that the rendered text must start with.</p> </li> <li> <p>*args :  Any \u2014 Additional positional arguments to pass to the <code>render</code> method.</p> </li> <li> <p>**kwargs :  Any \u2014 Additional keyword arguments to pass to the <code>render</code> method.</p> </li> </ul> <p> Raises </p> <ul> <li> <p>AssertionError \u2014 If the rendered text does not start with the expected string for either the original configuration object or the OmegaConf dictionary configuration.</p> </li> </ul> <p> source assert_render_endswith(cfg: Renderable, expected: str, *args: Any, **kwargs: Any) \u2192 None </p> <p>Assert that a rendered text ends with the expected string.</p> <p>This function takes a configuration object, renders a text using the configuration's class render method, and asserts that the rendered text ends with the specified string. It performs this check twice: once with the original configuration object and once with a configuration object converted to a dictionary using OmegaConf.</p> <p> Parameters </p> <ul> <li> <p>cfg :  Renderable \u2014 The configuration object to render the text from.</p> </li> <li> <p>expected :  str \u2014 The string that the rendered text must end with.</p> </li> <li> <p>*args :  Any \u2014 Additional positional arguments to pass to the <code>render</code> method.</p> </li> <li> <p>**kwargs :  Any \u2014 Additional keyword arguments to pass to the <code>render</code> method.</p> </li> </ul> <p> Raises </p> <ul> <li> <p>AssertionError \u2014 If the rendered text does not end with the expected string for either the original configuration object or the OmegaConf dictionary configuration.</p> </li> </ul>"}]}